identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector < 1:20
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
exit
library("swirl")
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
swirl()
boring_function <- function(x) {
#x
}
submit()
swirl()
source(boring_function)
info()
skip()
boring_function('My first function!')
boring_function
submit()
ls()
rm(list = ls())
ls()
library(swirl)
swirl()
submit()
sumbit()
submit()
my_mean(y<-c(4,5,10))
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(stdev,c(1.4, 3.6,7.9, 8.8))
evaluate(sd,c(1.4, 3.6,7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[lenght(x)]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("how is it going?")
sumbit()
submit()
submit()
mad_libs(noun = "test1", adjective = "test2", place = "test3")
submit()
submit()
submit()
submit()
submit()
info()
skip()
skip()
submit()
submit()
submit()
submit()
submit()
'Hello' %p% 'student!'
'Hello' %p% 'student!'
'Hello' %p% 'student!'
skip()
'Hello' %p% 'student!'
submit()
'I' %p% 'love'  %p% 'R!'
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_list <- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum())
lapply(flag_colors, sum
)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_amt <- sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags,unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
exit
swirl()
dim(flags)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
apply(flags, class, character(1))
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmasses, summary)
tapply(flags$population, flags$landmass, summary)
ls
ls(plants)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10, replace = FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1),100,replace = TRUE, prob = c(0.3,0.7))
flips <- sample(c(0,1),100,replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
rbinom(c(0,1), size = 100, prob = 0.7)
rbinom(100, size = 1, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(100,5)
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2
)
load(mtcars)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl)
boxplot(mtcars, formula = mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
makeCacheMatrix <- function(x = matrix()) {
mat <- NULL
set <- function(y) {
x <<- y
mat <<- NULL
}
get<-function() x
setmat<-function(solve) mat <<- solve
getmat<-function() mat
list(set=set, get=get,
setmat=setmat,
getmat=getmat)
}
x <- (1:10, 2, 5)
x <- (1:10, nrow = 2, ncol = 5)
x <- c(1:10, nrow = 2, ncol = 5)
x
x <- NULL
x <- matrix(1:10, nrow = 2, ncol = 5)
x
makeCacheMatrix()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
cacheSolve <- function(x=matrix(), ...) {
mat<-x$getmatrix()
if(!is.null(mat)){
message("getting cached data")
return(mat)
}
matrix<-x$get()
mat<-solve(matrix, ...)
x$setmatrix(mat)
mat
}
}
cacheSolve()
makeCacheMatrix()
source cachematrix.R
source cachematrix.R
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
cacheSolve <- function(x=matrix(), ...) {
mat<-x$getmatrix()
## check if there is a match in cache; return cached value
if(!is.null(mat)){
message("getting cached data")
return(mat)
}
## compute if the cache doesn't exist
matrix<-x$get()
mat<-solve(matrix, ...)
x$setmatrix(mat)
## return newly computed matrix
return(mat)
}
}
makeCacheMatrix <- function(x = matrix()) {
mat <- NULL
set <- function(y) {
x <<- y
mat <<- NULL
}
get<-function() x
setmat<-function(solve) mat <<- solve
getmat<-function() mat
list(set=set, get=get,
setmat=setmat,
getmat=getmat)
}
ls()
source cachematrix.R
source("cachematrix.R")
source("cachematrix.R")
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
m
source("cachematrix.R")
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m
m$get()
cacheSolve(m)
source("cachematrix.R")
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
m$get()
cacheSolve(x)
cacheSolve(x)
x
m
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
source("cachematrix.R")
m = makeCacheMatrix(x)
m$get()
cacheSolve(x)
cacheSolve(m)
cacheSolve(m)
source("cachematrix.R")
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
source("cachematrix.R")
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
source("cachematrix.R")
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
mat
source("cachematrix.R")
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
source("cachematrix.R")
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
source("cachematrix.R")
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
source("cachematrix.R")
source("cachematrix.R")
source("cachematrix.R")
source("cachematrix.R")
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
source("cachematrix.R")
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
print(c("Mean: ", meanSteps),right = TRUE, row.names = FALSE)
# setwd("/Users/rguliani/Documents/RajeevDocs/Coursera/RepResearch/RepData_PeerAssessment1")
setwd("/Users/rguliani/Documents/RajeevDocs/Coursera/RepResearch/RepData_PeerAssessment1")
source("./Scripts/ActivitySummary.R")
source("ActivitySummary.R")
source("ActivitySummary.R")
source("ActivitySummary.R")
source("ActivitySummary.R")
meanSteps <- mean(AggData$totsteps, na.rm = TRUE)
print(c("Mean: ", round(meanSteps, digits = 2),right = TRUE, row.names = FALSE)
medianSteps <- median(AggData$totsteps, na.rm = TRUE)
print(c("Median Steps: ",round(medianSteps, digits = 2),right = TRUE, row.names = FALSE)
# setwd("/Users/rguliani/Documents/RajeevDocs/Coursera/RepResearch/RepData_PeerAssessment1")
x
source("IntervalSummary.R")
source("IntervalSeries.R")
AggData
max(AggData)
source("IntervalSeries.R")
source("IntervalSeries.R")
source("IntervalSeries.R")
source("IntervalSeries.R")
source("IntervalSeries.R")
max(AggData)
max(AggData$totSteps)
max(AggData$totsteps)
AggData
max(AggIntData$totsteps)
source("IntervalSeries.R")
max(AggIntData$totsteps)
source("IntervalSeries.R")
max(AggIntData$totsteps)
FilterActData$day <- weekdays(as.Date(FilterActData$date))
FilterActData$dayType <- if (day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (day %in% c("Saturday", "Sunday"))
return("weekend")
else stop("Error in date conversion")
FilterActData$day
FilterActData$dayType <- sapply(FilterActData$day, FUN = {
if (day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (day %in% c("Saturday", "Sunday"))
return("weekend")
else stop("Error in date conversion")}
)
FilterActData$dayType <- sapply(FilterActData$day, FUN = {
if (FilterActData$day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (FilterActData$day %in% c("Saturday", "Sunday"))
return("weekend")
else stop("Error in date conversion")
}
}
if (FilterActData$day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (FilterActData$day %in% c("Saturday", "Sunday"))
return("weekend")
else stop("Error in date conversion")
if (FilterActData$day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
FilterActData$day
categrorize_day <- function(day)
{     day <-
if (day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (day %in% c("Saturday", "Sunday"))
return("weekend")
else stop("Error in date conversion")
}
FilterActData$dayType <- sapply(FilterActData$day, FUN = categorize_day(FilterActData$day))
categorize_day <- function(day)
{     day <-
if (day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (day %in% c("Saturday", "Sunday"))
return("weekend")
else stop("Error in date conversion")
}
FilterActData$dayType <- sapply(FilterActData$day, FUN = categorize_day(FilterActData$day))
FilterActData$dayType <- sapply(FilterActData$day, FUN = categorize_day)
FilterActData$dayType
source("WeekdaySeries.R")
ggplot(AggCatIntData, aes(interval, totsteps)) + geom_line() + facet_grid(dayType ~ .) +
xlab("Interval") + ylab("# steps")
library(ggplot2)
ggplot(AggCatIntData, aes(interval, totsteps)) + geom_line() + facet_grid(dayType ~ .) +
xlab("Interval") + ylab("# steps")
# Aggregate steps data by interval and day type (weekend or weekday)
AggCatIntData <- ddply(FilterActData, .(interval,dayType), summarise, totsteps = mean(steps))
# Plot interval level data by interval and day type
ggplot(AggCatIntData, aes(interval, totsteps)) + geom_line() + facet_grid(dayType ~ .) +
xlab("Interval") + ylab("# steps")
